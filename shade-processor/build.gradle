apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'com.novoda.bintray-release'

import com.android.build.gradle.internal.LoggerWrapper
import com.android.build.gradle.internal.SdkHandler

def javaVersions = rootProject.ext.processorJavaVersions
sourceCompatibility = javaVersions.sourceCompatibility
targetCompatibility = javaVersions.targetCompatibility

def logger = new LoggerWrapper(project.logger)
def handler = new SdkHandler(project, logger)
handler.sdkLoader.repositories.forEach { repository ->
    repositories.maven {
        url = repository.toURI()
    }
}

dependencies {
    compile dependency.javapoet
    compile dependency.guice
    compile dependency.autoService
    compile dependency.jsr305
    compile dependency.android
    compile dependency.supportAnnotations

    testCompile dependency.junit
    testCompile dependency.assertjCore3
    testCompile dependency.mockitoAll
    testCompile dependency.compileTesting
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', '../shade/src/main/java']
    }
    test {
        java.srcDirs = ['src/test/java', 'build/generated/source/']
        resources.srcDirs = ['src/test/resources']
    }
}

jacoco {
    toolVersion = jacocoVersion
    reportsDir = file("${project.buildDir}/reports/jacoco")
}

jacocoTestReport {
    group = 'report'
    description = 'Generate unit test coverage report'
    dependsOn = ['test']

    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publish {
    userOrg = metadata.userOrg
    repoName = metadata.repoName
    groupId = metadata.groupId
    artifactId = 'shade-processor'
    description = 'Automatic code generation for the SharedPreferences operation'
    version = metadata.version
    website = metadata.website
    licences = metadata.licenses
}
